{"meta":{"title":"HaoQi","subtitle":"HaoQiの博客","description":"忙碌的打工人","author":"HaoQi","url":"https://haoqi7.github.io","root":"/"},"pages":[{"title":"about","date":"2020-08-17T17:08:05.000Z","updated":"2023-01-22T13:35:48.311Z","comments":true,"path":"about/index.html","permalink":"https://haoqi7.github.io/about/index.html","excerpt":"","text":"记录知识，分享美好。 .aplayer{ margin: 1.5rem 0; } ol li:before { display: none; } 畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，交流学习！ 友链 HaoQiの友链信息 博客名称: HaoQiの博客 博客网址: https://haoqiyun.ml 个人博客: https://haoqiyung.ml 博客介绍: The harder you work, the luckier you will be 本人微信公众号，欢迎扫一扫订阅我。"},{"title":"archives","date":"2022-02-20T00:00:00.000Z","updated":"2023-01-22T13:35:48.311Z","comments":true,"path":"archives/index.html","permalink":"https://haoqi7.github.io/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-02-20T00:00:00.000Z","updated":"2023-01-22T13:35:48.311Z","comments":true,"path":"categories/index.html","permalink":"https://haoqi7.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-11-17T17:08:05.000Z","updated":"2023-01-22T13:35:48.311Z","comments":true,"path":"friends/index.html","permalink":"https://haoqi7.github.io/friends/index.html","excerpt":"","text":".links-content{ margin-top:1rem; } .link-navigation::after { content: \" \"; display: block; clear: both; } .card { width: 45%; font-size: 1rem; padding: 10px 20px; border-radius: 4px; transition-duration: 0.15s; margin-bottom: 1rem; display:flex; } .card:nth-child(odd) { float: left; } .card:nth-child(even) { float: right; } .card:hover { transform: scale(1.1); box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04); } .card a { border:none; } .card .ava { width: 3rem!important; height: 3rem!important; margin:0!important; margin-right: 1em!important; border-radius:6px; } .card .card-header { font-style: italic; overflow: hidden; width: 100%; } .card .card-header a { font-style: normal; color: #2bbc8a; font-weight: bold; text-decoration: none; } .card .card-header a:hover { color: #d480aa; text-decoration: none; } .card .card-header .info { font-style:normal; color:#a3a3a3; font-size:18px; min-width: 0; overflow: hidden; white-space: nowrap; } HaoQiの博客 努力学习菜鸟。 二次元博客 兴趣分享站。 one'Drives 个人自建网盘。 Musics 在线听音乐。 导航页 自建导航页。 壁纸 在线壁纸库。 GAMES 童年经典游戏。"},{"title":"tags","date":"2022-02-20T00:00:00.000Z","updated":"2023-01-22T13:35:48.311Z","comments":true,"path":"tags/index.html","permalink":"https://haoqi7.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo添加页面加载动画","slug":"hexo添加加载页面动画","date":"2022-04-13T14:17:38.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/ec74c60a.html","link":"","permalink":"https://haoqi7.github.io/posts/ec74c60a.html","excerpt":"","text":"修改配置文件在 hexo 博客主题文件_config.yml中添加 # 开启页面加载动画 preloader: enable: true 打开主题目录中 /layout/_partial /head.ejs文件，将 以下内容填入&lt;head&gt; 标签中。 &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"&lt;%- theme.jsDelivr.url %>&lt;%- url_for('/css/loading.css') %>\" /> 打开主题目录 中/layout/layout.ejs文件，将 以下内容填入&lt;body&gt; 标签中。 &lt;%- partial(&#39;_widget&#x2F;loading&#39;) %&gt; 添加文件在主题目录/layout/_widget下添加loading.ejs文件 &lt;% if (theme.preloader.enable) &#123; %&gt; &lt;div id&#x3D;&quot;loading-box&quot;&gt; &lt;div class&#x3D;&quot;loading-left-bg&quot;&gt;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;loading-right-bg&quot;&gt;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;spinner-box&quot;&gt; &lt;div class&#x3D;&quot;configure-border-1&quot;&gt; &lt;div class&#x3D;&quot;configure-core&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;configure-border-2&quot;&gt; &lt;div class&#x3D;&quot;configure-core&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;loading-word&quot;&gt;加载中...&lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;script&gt; window.addEventListener(&#39;load&#39;, function()&#123; document.body.style.overflow &#x3D; &#39;auto&#39;; document.getElementById(&#39;loading-box&#39;).classList.add(&quot;loaded&quot;) &#125;, false) &lt;&#x2F;script&gt; &lt;% &#125; %&gt; 在主题目录/source/css下添加loading.css文件 #loading-box .loading-left-bg, #loading-box .loading-right-bg &#123; position: fixed; z-index: 1000; width: 50%; height: 100%; background-color: #37474f; transition: all 0.5s; &#125; #loading-box .loading-right-bg &#123; right: 0; &#125; #loading-box &gt; .spinner-box &#123; position: fixed; z-index: 1001; display: flex; justify-content: center; align-items: center; width: 100%; height: 100vh; &#125; #loading-box .spinner-box .configure-border-1 &#123; position: absolute; padding: 3px; width: 115px; height: 115px; background: #ffab91; animation: configure-clockwise 3s ease-in-out 0s infinite alternate; &#125; #loading-box .spinner-box .configure-border-2 &#123; left: -115px; padding: 3px; width: 115px; height: 115px; background: rgb(63, 249, 220); transform: rotate(45deg); animation: configure-xclockwise 3s ease-in-out 0s infinite alternate; &#125; #loading-box .spinner-box .loading-word &#123; position: absolute; color: #ffffff; font-size: 0.8rem; &#125; #loading-box .spinner-box .configure-core &#123; width: 100%; height: 100%; background-color: #37474f; &#125; div.loaded div.loading-left-bg &#123; transform: translate(-100%, 0); &#125; div.loaded div.loading-right-bg &#123; transform: translate(100%, 0); &#125; div.loaded div.spinner-box &#123; display: none !important; &#125; @keyframes configure-clockwise &#123; 0% &#123; transform: rotate(0); &#125; 25% &#123; transform: rotate(90deg); &#125; 50% &#123; transform: rotate(180deg); &#125; 75% &#123; transform: rotate(270deg); &#125; 100% &#123; transform: rotate(360deg); &#125; &#125; @keyframes configure-xclockwise &#123; 0% &#123; transform: rotate(45deg); &#125; 25% &#123; transform: rotate(-45deg); &#125; 50% &#123; transform: rotate(-135deg); &#125; 75% &#123; transform: rotate(-225deg); &#125; 100% &#123; transform: rotate(-315deg); &#125; &#125; 部署hexo c hexo g hexo d 参考链接：https://www.jianshu.com/p/a81a629e2f9a","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://haoqi7.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"},{"name":"加载动画","slug":"加载动画","permalink":"https://haoqi7.github.io/tags/%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/"}],"author":"HaoQi"},{"title":"hexo博客文章添加标签样式","slug":"标签","date":"2022-04-09T00:30:13.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/7f37a4ea.html","link":"","permalink":"https://haoqi7.github.io/posts/7f37a4ea.html","excerpt":"","text":"标签用法&lt;div class&#x3D;&quot;note info&quot;&gt;这里是 info 标签样式&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;note info no-icon&quot;&gt;这里是不带符号的 info 标签样式&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;note primary&quot;&gt;这里是 primary 标签样式&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;note primary no-icon&quot;&gt;这里是不带符号的 primary 标签样式&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;note warning&quot;&gt;这里是 warning 标签样式&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;note warning no-icon&quot;&gt;这里是不带符号的 warning 标签样式&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;note danger&quot;&gt;这里是 danger 标签样式&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;note danger no-icon&quot;&gt;这里是不带符号的 danger 标签样式&lt;&#x2F;div&gt; ####","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://haoqi7.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"},{"name":"label","slug":"label","permalink":"https://haoqi7.github.io/tags/label/"}],"author":"HaoQi"},{"title":"hexo新建文章自动打开Typora","slug":"打开文章","date":"2022-04-08T16:53:35.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/dc9e8c33.html","link":"","permalink":"https://haoqi7.github.io/posts/dc9e8c33.html","excerpt":"","text":"hexo 新建文章自动打开 Typora写新文章时，需要控制台执行 hexo new “title”，这样就会在_posts 下生成一篇新文章，但需要手动打开，挺麻烦，只需要在站点根目录下新建 scripts 目录，然后在新建 auto_open.js，在文件填入一下内容： Javascript var spawn &#x3D; require(&#39;child_process&#39;).exec; &#x2F;&#x2F; Hexo 2.x 用户复制这段 &#x2F;&#x2F;hexo.on(&#39;new&#39;, function(path)&#123; &#x2F;&#x2F;spawn(&#39;start &quot;markdown编辑器绝对路径.exe&quot; &#39; + path); &#x2F;&#x2F;&#125;); &#x2F;&#x2F; Hexo 3 用户复制这段 hexo.on(&#39;new&#39;, function(data)&#123; spawn(&#39;start &quot;D:\\Program Files\\Typora\\Typora.exe&quot; &#39; + data.path); &#125;); 注： “D:\\Program Files\\Typora\\Typora.exe” 是我本地编辑器的路径，只需要改为你本地编辑器的路径即可。然后在执行 hexo cl &amp;&amp; hexo g -d，部署到 GitHub 即可，以后在发布文章就会自动打开编辑器。","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://haoqi7.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"},{"name":"typora","slug":"typora","permalink":"https://haoqi7.github.io/tags/typora/"}],"author":"HaoQi"},{"title":"hexo站点文件详解","slug":"hexo站点文件详解","date":"2022-04-08T01:16:50.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/a82a6eba.html","link":"","permalink":"https://haoqi7.github.io/posts/a82a6eba.html","excerpt":"","text":"hexo 站点配置文件 config 详解 # Site 站点配置 title: #网站标题 subtitle: #网站副标题 description: #网站描述 author: #作者名字 language: zh-CN #网站使用的语言 timezone: Asia&#x2F;Shanghai #网站时区 # URL #可以不用配置 ## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39; url: #网址，搜索时会在搜索引擎中显示 root: &#x2F; #网站根目录，不用填写 permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F; #永久链接格式 permalink_defaults: #永久链接中各部分的默认值 # Directory 目录配置 source_dir: source #资源文件夹，这个文件夹用来存放内容，文章也在 public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件 tag_dir: tags #标签文件夹 archive_dir: archives #归档文件夹 category_dir: categories #分类文件夹 code_dir: downloads&#x2F;code #Include code 文件夹 i18n_dir: :lang #国际化文件夹 skip_render: #跳过指定文件的渲染 # Writing 写作配置 new_post_name: :title.md # 新文章的文件名称 default_layout: post #默认布局 titlecase: false # Transform title into titlecase external_link: true # Open external links in new tab filename_case: 0 #把文件名称转换为 (1) 小写或 (2) 大写 render_drafts: false #显示草稿 post_asset_folder: false #是否启动资源文件夹 relative_link: false #把链接改为与根目录的相对位址 future: true highlight: #代码块的设置 enable: true line_number: true auto_detect: true tab_replace: # Category &amp; Tag 分类 &amp; 标签 default_category: uncategorized #默认分类 category_map: #分类别名 tag_map: #标签别名 # Date &#x2F; Time format 时间和日期 ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http:&#x2F;&#x2F;momentjs.com&#x2F;docs&#x2F;#&#x2F;displaying&#x2F;format&#x2F; date_format: YYYY-MM-DD time_format: HH:mm:ss # Pagination 分页 ## Set per_page to 0 to disable pagination per_page: 10 #每页显示的文章量 (0 &#x3D; 关闭分页功能) pagination_dir: page #分页目录 # Extensions 扩展 ## Plugins: http:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F; 插件 ## Themes: http:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F; 主题 theme: matery #当前主题名称 # Deployment #部署到github ## Docs: http:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html deploy: type:","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://haoqi7.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"}],"author":"HaoQi"},{"title":"罗翔语录","slug":"罗翔语录","date":"2022-04-05T20:11:54.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/73f0031f.html","link":"","permalink":"https://haoqi7.github.io/posts/73f0031f.html","excerpt":"","text":"这个奖项很重，我感觉我有一点搬不动，可能千千万万的人才能把它举起来。同时这个奖杯又比较轻，其实我一只手就可以拿动。这其实是不是说，所有奖项都跟花一样，跟草一样，花荣草茂，终究都会枯萎。当我拿到这个奖项他就已经成为了过去式，所以最重要的还是每天能够活在一种从容笃定和盼望中。我时常问我自己，你那些自我感动感动他人的言语是不是只是一场表演，是不是自我欺骗，你能不能够有相应的行为，能够彰显出来。所以我真的希望有一种力量能够帮助自己，诚实的面对自己，认识到自己能够靠着这种力量能够每天活在其中坦然和不羞愧中，在自己的使命中能够超越这种融合勇往直前。","categories":[{"name":"随笔篇","slug":"随笔篇","permalink":"https://haoqi7.github.io/categories/%E9%9A%8F%E7%AC%94%E7%AF%87/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://haoqi7.github.io/tags/%E9%9A%8F%E7%AC%94/"}],"author":"HaoQi"},{"title":"文章节选（一）","slug":"随笔","date":"2022-04-01T01:02:54.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/f0407573.html","link":"","permalink":"https://haoqi7.github.io/posts/f0407573.html","excerpt":"","text":"烟也有影子，可是太稀薄，没有阴。大晴天，几团浮云会投下几块黑影，但不及有阴，云又过去了。整片的浓云，蒙住了太阳，够点染一大半天的阴，够笼罩整片的地，整片的海，造成漫漫无际的晦霆。不过浓阴不会持久;持久的是漠漠轻阴。好像谁往空撒了一匹轻纱，荡肠在风里，撩拨不开，又捉摸不住，恰似初识愁滋昧的少年心情。愁在哪里?并不能找出个影儿。","categories":[{"name":"随笔篇","slug":"随笔篇","permalink":"https://haoqi7.github.io/categories/%E9%9A%8F%E7%AC%94%E7%AF%87/"}],"tags":[{"name":"article","slug":"article","permalink":"https://haoqi7.github.io/tags/article/"}],"author":"HaoQi"},{"title":"随笔","slug":"文章节选","date":"2022-03-31T00:02:54.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/f77810a8.html","link":"","permalink":"https://haoqi7.github.io/posts/f77810a8.html","excerpt":"","text":"过了许久，萤火虫起飞，忽然想到什么似的开始展翅。像找回失去的时间一般，在蓄水塔边缘描出一道弧形，稍事停留在风微弱处，一瞬间，穿过栏杆，漂浮于夜色的闇黑，朝东飞去。萤火虫飞走之后，那光线的轨迹在我的心中长期留存。闭上眼睛，厚密的黑暗之中，微微的光芒宛如无处可去的游魂，徘徊不已。黑暗中，我几度尝试伸出手指，却什么也接触不到。一丝微弱的光芒，永远停在指尖的稍前端。——《萤火虫》","categories":[{"name":"随笔篇","slug":"随笔篇","permalink":"https://haoqi7.github.io/categories/%E9%9A%8F%E7%AC%94%E7%AF%87/"}],"tags":[{"name":"article","slug":"article","permalink":"https://haoqi7.github.io/tags/article/"}],"author":"HaoQi"},{"title":"代码压缩","slug":"hexo-neat 插件实现代码压缩","date":"2022-03-29T10:15:36.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/ed28d520.html","link":"","permalink":"https://haoqi7.github.io/posts/ed28d520.html","excerpt":"","text":"hexo-neat 插件实现代码压缩注意：这个插件是有 Bug 的，压缩 md 文件会使 markdown 语法的代码块消失,会删除全角空格,并且博客使用 apayer 音乐插件，会无法循环播放音频。在博客站点根目录执行安装代码： npm install hexo-neat --save 在博客根目录下的配置文件添加代码： neat_enable: true neat_html: enable: true exclude: neat_css: enable: true exclude: - &#39;*.min.css&#39; neat_js: enable: true mangle: true output: compress: exclude: - &#39;*.min.js&#39; 然后，可以压缩代码，部署，上传博客了。 hexo cl hexo g hexo d 补充：为了解决以上问题，在网上搜到一些解决办法，对于 matery 主题（其他主题自行解决）需要将以上默认配置修改为： neat_enable: true neat_html: enable: true exclude: - &#39;**&#x2F;*.md&#39; neat_css: enable: true exclude: - &#39;**&#x2F;*.min.css&#39; neat_js: enable: true mangle: true output: compress: exclude: - &#39;**&#x2F;*.min.js&#39; - &#39;**&#x2F;**&#x2F;instantpage.js&#39; - &#39;**&#x2F;matery.js&#39;","categories":[{"name":"插件篇","slug":"插件篇","permalink":"https://haoqi7.github.io/categories/%E6%8F%92%E4%BB%B6%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"}],"author":"HaoQi"},{"title":"备份hexo博客","slug":"备份hexo博客","date":"2022-03-27T10:14:46.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/a65cb99.html","link":"","permalink":"https://haoqi7.github.io/posts/a65cb99.html","excerpt":"","text":"备份 scaffolds 文章模版 必须备份 source 博客文章 必须备份 themes 主题文件 必须备份 .gitignore 限定在 push 时那些文件可以忽略 必须备份 _config.yml 站点配置文件 必须备份 package.json 安装包的名称 必须备份 .ssh 密钥文件 必须备份 安装配置 Hexo1.用之前的套路安装 Node.js 环境 Git 环境安装 hexo npm install -g hexo 2.新建 hexo 文件夹，放入备份的 hexo 博客文件 3.安装依赖包 npm install 4.安装上传插件 npm install hexo-deployer-git --save 5.如果你使用了更多的插件，在这里安装就可以了。配置 Git 输入你自己的邮箱地址 git config --global user.name &quot;qq88561280&quot; git config --global user.email &quot;8353651280@qq.com&quot; 6.生成新的 public 文件夹,开始上传 hexo 博客 hexo g hexo d","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://haoqi7.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"}],"author":"HaoQi"},{"title":"白嫖notability","slug":"教你如何白嫖notability","date":"2022-03-24T23:29:46.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/d00bc300.html","link":"","permalink":"https://haoqi7.github.io/posts/d00bc300.html","excerpt":"","text":"1、下载并安装“爱思助手”到电脑上 2、用数据线连接电脑（pc 和 mac 都可以）和 iPad，连接成功之后点击在 iPad 安装爱思极速版。 3、打开“爱思极速版”搜索 notability，选择 10.5 版本下载 4、下载好之后在 App Store 里搜索 notability，然后更新,有的会显示“获取”（下载），不要慌！就点“获取”. 5、等“更新”or“获取”好之后，点开 notability,因为已经更新到最新版本了，点“关于应用”下面的“订阅”，显示 classic 就代表成功啦 6、确定是 classic 之后，可以选择卸载“爱思极速版”或已安装的 notability 注意：如果显示的是 starter，就把 notability 从 iPad 上进行“删除 App”的操作，从第三步再多来一遍或几遍，它会成功显示“classic”的！我尝试了三次终于成功。 本文参考链接： https://www.bilibili.com/read/cv15703964","categories":[{"name":"分享篇","slug":"分享篇","permalink":"https://haoqi7.github.io/categories/%E5%88%86%E4%BA%AB%E7%AF%87/"}],"tags":[{"name":"notability","slug":"notability","permalink":"https://haoqi7.github.io/tags/notability/"}],"author":"HaoQi"},{"title":"解决LeanCloud流控问题","slug":"解决LeanCloud流控问题","date":"2022-03-23T12:10:00.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/2cc3d378.html","link":"","permalink":"https://haoqi7.github.io/posts/2cc3d378.html","excerpt":"","text":"1.前言最近测试的时候发现开启的 LeanCloud 邮件提醒无法唤醒，查看日志了解到“因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠”。然后在网上搜索了一些文章发现日期都比较老，进行修改测试后成功解决了流控问题，特此记录。 2.部署部署方面简单说一下，网上有很多比较全的教程。 2.1 创建应用打开 leancloud 注册国际版账户，创建应用，选择开发版。打开创建的应用，选择云引擎–&gt;设置–&gt;云引擎域名(输入自己喜欢的一个的前缀)，也可以选择绑定自己的域名，选择设置–&gt;域名绑定–&gt;云引擎域名注意：一定要选择国际版，如果你选择的是华北或者华东的话，Valine 后台评论管理是需要备案才能绑定的。 2.2 自定义环境变量选择云引擎–&gt;设置–&gt;添加自定义环境变量 变量名称 参考 说明 SITE_NAME HaoQi [必填] 网站名称 SITE_URL https://haoqiyun.top [必填] 网站地址 SMTP_USER w00989988@163.com [必填] 邮箱地址 SMTP_PASS ######## [必填] 邮箱授权码 (部分邮箱服务商默认开启 SMTP) (如果没有授权码可直接填写邮箱密码） SMTP_SERVICE 163 [必填] 邮箱服务商 ADMIN_URL https://****sapps.us [必填] 后台管理地址 SENDER_NAME HaoQi [必填] 寄件人名称 2.3 部署选择云引擎–&gt;部署–&gt;部署项目–&gt;Git部署–&gt;配置Git–&gt;填写下方任意一个地址–&gt;保存–&gt;生产环境–&gt;部署项目部署地址：https://github.com/Haoqi7/valine-admin.git 2.4 创建定时任务 定时检查 24 小时内漏发的邮件通知生产环境选择resend_mails选择Cron表达式时间自己调整0 0 1 * * * 自动唤醒生产环境选择self_wake选择Cron表达式时间自己调整0 0/60 0 * * ? 2.5 设置安全域名设置地址为博客地址 3.Github Actions3.1 添加 token在个人页面选择setting，点击Developer settings，选择Personal access tokens，添加一个新的 TOKEN。设置名字为GITHUB_TOKEN ，然后勾选全部选项。 3.2 接下来 fork 项目https://github.com/haoqiyung/WakeLean 3.3 添加评论后台成功 FORK 后，进入项目的设置，选择 Secrets。name 填写 SITE，Value 填写你的 leancloud 的后台地址（ADMIN_URL） 4.0 启动对自己的项目点个 star 就可以启动了，可以看 actions 界面是否正常运行。 参考链接：https://cloud.tencent.com/developer/article/1628950 [ ](https://cloud.tencent.com/developer/article/1628950)","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://haoqi7.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"},{"name":"leancloud","slug":"leancloud","permalink":"https://haoqi7.github.io/tags/leancloud/"},{"name":"valine","slug":"valine","permalink":"https://haoqi7.github.io/tags/valine/"},{"name":"Github Acions","slug":"Github-Acions","permalink":"https://haoqi7.github.io/tags/Github-Acions/"}],"author":"HaoQi"},{"title":"分享几个文献下载网址","slug":"分享几个文献下载网站","date":"2022-03-20T22:14:46.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/64abd39e.html","link":"","permalink":"https://haoqi7.github.io/posts/64abd39e.html","excerpt":"","text":"1.OnAcademicOnAcademic 是一个外文文献交流平台，据说拥有 5 亿多页出版物。 2.杭州图书馆在支付宝注册杭州图书馆即可登录杭州图书馆官网跳转知网链接进行下载文献。 3.researchrabbit一种新的文献检索及可视化工具，但是需要老师或者在校生才可注册。 4.浙江图书馆在支付宝注册杭州图书馆即可登录数据库进行下载文献。 5.connectedpapers可以在线分析文献引文信息","categories":[{"name":"文献篇","slug":"文献篇","permalink":"https://haoqi7.github.io/categories/%E6%96%87%E7%8C%AE%E7%AF%87/"}],"tags":[{"name":"download","slug":"download","permalink":"https://haoqi7.github.io/tags/download/"},{"name":"literature","slug":"literature","permalink":"https://haoqi7.github.io/tags/literature/"}],"author":"HaoQi"},{"title":"PicGo+Gitee","slug":"PicGo+Gitee (码云)","date":"2022-03-19T00:10:30.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/b2bf0a77.html","link":"","permalink":"https://haoqi7.github.io/posts/b2bf0a77.html","excerpt":"","text":"前言之前讲到过使用 PicGo+Github 来搭建免费图床，但加载速度不是很理想。今天来分享如何使用 PicGo+Gitee 搭建图床。 搭建打开码云官方网站，进入你的个人仓库界面，新建仓库 设置私人令牌 配置 Gitee 图床打开 PicGo 软件，点击软件界面中的插件设置，然后搜索 gitee，你会发现，有三个插件，我选择的是 gitee-uploader 1.1.2。 配置说明： repo：填写你的图床仓库名称 branch：填写分支名称 path：图片存储路径 token：填写上面教程中你设置的私人令牌 customPath：不需要填写 customUrl：不需要填写 注意：gitee 容量有限制，具体请看官方文档说明。","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://haoqi7.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"PicGo","slug":"PicGo","permalink":"https://haoqi7.github.io/tags/PicGo/"},{"name":"Gitee","slug":"Gitee","permalink":"https://haoqi7.github.io/tags/Gitee/"},{"name":"图床","slug":"图床","permalink":"https://haoqi7.github.io/tags/%E5%9B%BE%E5%BA%8A/"}],"author":"HaoQi"},{"title":"hexo博客安装及生成依赖","slug":"hexo博客安装及生成依赖","date":"2022-03-18T00:12:46.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/b223f3a8.html","link":"","permalink":"https://haoqi7.github.io/posts/b223f3a8.html","excerpt":"","text":"生成 package.json 文件package.json 文件可以手工编写，也可以使用 npm init 命令自动生成 npm init 这个命令采用互动方式，要求用户回答一些问题，然后在当前目录生成一个基本的 package.json 文件。所有问题之中，只有项目名称（name）和项目版本（version）是必填的，其他都是选填的。 文档有了 package.json 文件，直接使用 npm install 命令，就会在当前目录中安装所需要的模块。 npm install 如果一个模块不在 package.json 文件之中，可以单独安装这个模块，并使用相应的参数，将其写入 package.json 文件之中。 npm install express --save npm install express --save-dev 上面代码表示单独安装 express 模块，–save 参数表示将该模块写入 dependencies 属性，–save-dev 表示将该模块写入 devDependencies 属性。 添加 node 的 modules第一种方法： 通过生成 package.json 文件，编辑这个文件，再通过 npm install 。 这时候，我们只需要把依赖包添加到 package.json 文件中。 第二种方法： 不用 package.json， 而是直接通过 npm install moduleName 的方式，逐个添加依赖包。 node_modules 的创建：用 npm 安装模块 用 npm 安装模块有两种方式:本地安装和全局安装。如果你需要用 Node.js 的 require 来获取依赖，那么你需要的是本地安装，也就是默认的方式。如果你需要把它当做诸如 gruntCLI 这样的命令行工具，那就要用全局安装。 本地安装 npm install &lt;package_name&gt; 这个命令会在当前目录下创建一个叫 node_modules 的文件夹，然后把安装的代码放到这个文件夹下面。 检查成功了没有： npm ls node_modules","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://haoqi7.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"},{"name":"package","slug":"package","permalink":"https://haoqi7.github.io/tags/package/"},{"name":"node_modules","slug":"node-modules","permalink":"https://haoqi7.github.io/tags/node-modules/"}],"author":"HaoQi"},{"title":"GitHub Actions实现博客自动发布","slug":"GitHub Actions","date":"2022-03-17T10:10:46.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/6c0cf188.html","link":"","permalink":"https://haoqi7.github.io/posts/6c0cf188.html","excerpt":"","text":"前言为了方便可以使用 GitHub Actions 实现博客自动发布，将静态博客页面部署到多个服务器上，比如 GitHub Pages，Gitee pages 以及云服务器上。本文介绍使用 GitHub Actions 实现将 Hexo 博客自动编译并发布到 GitHub Pages 上。 流程SSH 秘钥生成秘钥用于仓库间的推送： ssh-keygen -f hexo-deploy-key -t rsa -C &quot;个人邮箱&quot; 以上命令会在当前路径下生成：秘钥 hexo-deploy-key 和公钥 hexo-deploy-key.pub，然后分别添加到对应的文件中。 页面文件仓库（即 haoqi7.github.io）: 在 Settings &gt; Deploy keys 中添加 Deploy key，名称为 deploy_key 内容为 hexo-deploy-key.pub 文件内容，同时勾选 Allow write access 选项。博客源文件库：在 Settings &gt; Secrets 中添加一个 Secret，名称为 DEPLOY_KEY，内容为 hexo-deploy-key 文件内容。后续在 Workflow 中通过名称 DEPLOY_KEY 使用这个密钥。 Workflow 配置在博客源文件库中点击 actions 创建新的工作流，配置内容如下： name: Deploy on: [push] jobs: build: runs-on: ubuntu-latest name: A job to deploy blog. steps: - name: Checkout uses: actions&#x2F;checkout@v1 with: submodules: true # Checkout private submodules(themes or something else). # Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.) - name: Cache node modules uses: actions&#x2F;cache@v1 id: cache with: path: node_modules key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#39;**&#x2F;package-lock.json&#39;) &#125;&#125; restore-keys: | $&#123;&#123; runner.os &#125;&#125;-node- - name: Install Dependencies if: steps.cache.outputs.cache-hit !&#x3D; &#39;true&#39; run: npm ci # Deploy hexo blog website. - name: Deploy id: deploy uses: sma11black&#x2F;hexo-action@v1.0.3 with: deploy_key: $&#123;&#123; secrets.DEPLOY_KEY &#125;&#125; user_name: haoqi7 # (修改为自己的用户名) user_email: w00989988@gmail.com # (修改为自己的邮箱地址) commit_msg: $&#123;&#123; github.event.head_commit.message &#125;&#125; # (or delete this input setting to use hexo default settings) # Use the output from the &#96;deploy&#96; step(use for test action) - name: Get the output run: | echo &quot;$&#123;&#123; steps.deploy.outputs.notify &#125;&#125;&quot;","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://haoqi7.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"},{"name":"GitHub Actions","slug":"GitHub-Actions","permalink":"https://haoqi7.github.io/tags/GitHub-Actions/"}],"author":"HaoQi"},{"title":"My-First-Blog","slug":"My-First-Blog","date":"2022-03-16T18:19:36.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/b92e57a2.html","link":"","permalink":"https://haoqi7.github.io/posts/b92e57a2.html","excerpt":"","text":"1 效果演示 2 内容简介 前前后后大概花了三周的时间，目前个人博客已经完善的差不多了，现在写个文章做个阶段总结，后续如果有更新的地方，会及时补充。本博客基于 Hexo 框架，采用hexo-theme-matery主题，在这里非常感谢作者洪卫的hexo-blog-fly和Luckey的LuckyBlog博客开源，让我站在巨人的肩膀上顺利搭建完成了我的个人博客。极大简化了构建博客的工作量和复杂度。 个人博客 演示：https://haoqiyun.top 3 Hexo 初级搭建 01. 安装 GitGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git的作用是将本地的网页文件传到github上。 Git下载地址 windows： 到 git 官网上下载.exe 文件,Download git,安装选项还是全部默认，最后一步添加路径时选择Use Git from the Windows Command Prompt。 02. 安装 node.jsHexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。 windows： 到Node.js 官网下载.exe文件，安装选项全部默认。安装好之后，按Win+R打开 cmd 命令提示符，输入node -v和npm -v，若出现版本号，则说明安装成功。 注（踩坑点)：后续如果自定义按照豆瓣页面需要按装指定 node.js 版本才可以正常运行。具体步骤后文会讲。 03. 添加 npm 国内源使用阿里的国内镜像进行加速下载 npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org 注（踩坑点)： 001如果不更换 npm 源会造成安装慢或者安装失败原因。此时可以使用科学上网工具解决。 002此方法在添加国内源后,安装可能会出现各种错误。 后续我会发文其他方式解决这种错误，当然出现这种问题的可能性比较小，正好我都遇上了。 04. 安装 Hexo前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹Blog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 比如我的博客文件都存放在D:\\桌面\\Blog目录下。 在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不用Windows自带的cmd了。 定位到该目录下，输入npm install -g hexo-cli安装Hexo。 npm install -g hexo-cli 安装完后输入hexo -v验证是否安装成功。 到此为止hexo就安装完了。 接下来初始化一下hexo,即初始化我们的网站，输入hexo init初始化文件夹 hexo init 新建完成后，指定文件夹MyBlog目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题** _config.yml: 博客的配置文件** 到此为止，本地的网站配置完成了。 输入hexo g生成静态网页，然后输入hexo s打开http://localhost:4000地址即可查看是否成功 hexo g hexo s 05. 注册 Github 账号创建个人仓库接下来就去注册一个github账号，用来存放我们的网站。 打开https://github.com/，新建一个项目仓库New repository，如下所示： 然后如下图所示，输入自己的项目名字，后面一定要加.github.io后缀，README 初始化也要勾上 要创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是http://xxxx.github.io，其中 xxx 就是你注册GitHub的用户名。例如我的：http://haoqi7.github.io 06. 生成 SSH 添加到 GitHub生成SSH添加到GitHub，连接Github与本地。右键打开git bash here，然后输入下面命令： git config --global user.name &quot;注册GitHub用户名&quot; git config --global user.email &quot;注册GitHub的邮箱&quot; 用以下两条，检查一下你有没有输对 git config user.name git config user.email 然后创建SSH,一路回车 ssh-keygen -t rsa -C &quot;注册GitHub的邮箱&quot; 这个时候它会告诉你已经生成了.ssh的文件夹。在git bash中输入 cat ~&#x2F;.ssh&#x2F;id_rsa.pub 将输出的内容复制到框中，点击确定保存。 打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便取一个都可以，把你的id_rsa.pub里面的信息复制进去。如图： 在git bash输入ssh -T git@github.com，如果如下图所示，出现你的用户名，那就成功了。 ssh -T git@github.com 07. 将 hexo 部署到 GitHub将hexo生成的文章部署到GitHub上，打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。找到如下配置进行修改： deploy: type: git repository: https:&#x2F;&#x2F;github.com&#x2F;haoqi7&#x2F;haoqi7.github.io branch: master # master有的会创建分支 建议改为 main repository修改为你自己的github项目地址即可，就是部署时，告诉工具，将生成网页通过git方式上传到你对应的链接仓库中。 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 npm install hexo-deployer-git --save 注（巨坑）：这里如果安装不成功为 npm 源或者网络环境错误。 然后就可以部署提交到github，过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了 hexo clean hexo generate hexo deploy 其中 hexo clean清除了你之前生成的东西。 hexo generate，生成静态文章，可以用 hexo g缩写 ，hexo deploy部署文章，可以用hexo d缩写 注意deploy时可能要你输入username和password。 08. 写文章和发布文章首先在博客根目录下右键打开git bash here，安装一个扩展npm i hexo-deployer-git。 npm i hexo-deployer-git 然后输入hexo new post &quot;article title&quot;，新建一篇文章。 hexo new post &quot;article title&quot; 然后打开D:\\Blog\\source\\_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件。 另外推荐直接使用Typora编写markdown文章,简单好用 编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章了。 到此为止，Hexo初级搭建就已经完成了。 4 Hexo 优化定制 01. Hexo 相关目录文件1.1 博客目录构成介绍node_modules是node.js各种库的目录，public是生成的网页文件目录，scaffolds里面就三个文件，存储着新文章和新页面的初始设置，source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，themes存放着主题文件，一般也用不到。 - node_modules - public - scaffolds - source - _data - _posts - about - archives - categories - friends - tags - themes 1.2 hexo 基本配置在文件根目录下的_config.yml，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。 1.2.1 网站参数描述title网站标题subtitle网站副标题description网站描述author您的名字language网站使用的语言timezone网站时区。Hexo 默认使用您电脑的时区。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 1.2.2 网址在这里，你需要把url改成你的网站域名。 02. 定制主题这里推荐作者洪卫的hexo-blog-fly博客主题，该主题是基于hexo-theme-matery优化的，需要把博客相关信息换成您自己的就可以部署了，极大简化了构建博客的工作量和复杂度。 2.1 简单使用方法 安装Git, 安装nodeJS，安装Hexo 你可以直接fork一份源码到你的仓库，clone到本地博客文件夹内 在本地博客仓库运行npm i命令安装依赖包 直接修改配置信息，改成自己的信息 运行命令hexo clean（清除生成文件），hexo g（生成网页）， hexo s（本地预览），hexo d（部署） 2.2 原主题特性: 简单漂亮，文章内容美观易读 Material Design 设计 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现 首页轮播文章及每天动态切换 Banner 图片 瀑布流式的博客文章列表（文章无特色图片时会有 24 张漂亮的图片代替） 时间轴式的归档页 词云的标签页和雷达图的分类页 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等） 可自定义的数据的友情链接页面 支持文章置顶和文章打赏 支持 MathJax TOC 目录 可设置复制文章内容时追加版权信息 可设置阅读文章时做密码验证 Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Gitalk） 集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能 支持在首页的音乐播放和视频播放功能 2.3 新增加特性: 修改了原主题的一些很多 bug 加入图片懒加载功能，在根目录配置文件开启和关闭 增加留言板功能 在关于板块,加入简历功能页 增加视听[视觉听觉影音]板块 支持 emoji 表情，用 markdown emoji 语法书写直接生成对应的能跳跃的表情。 增加网站运行时间显示 增加动漫模型 整体替换 Banner 图片和文章特色图片 增加分类相册功能 修改了一些控件的参数 修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观 解决首页文章列表卡片上方 border-radius 圆角失效的 bug 添加页面樱花飘落动效 添加鼠标点击烟花爆炸动效 加入天气接口控件 加入鼠标点击文字特效 添加页面雪花飘落动效 添加在线聊天插件 调整线聊天插件参数，使之能够随着鼠标滑动位置自适应调整 持续更新… 2.4 切换主题如果想自己动手对hexo-theme-matery优化的话，可以修改 Hexo 根目录下的_config.yml的 theme 的值 theme: hexo-theme-matery _config.yml 文件的其它修改建议: 请修改 _config.yml 的 url 的值为你的网站主 URL（如：http://xxx.github.io）。 建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。 如果你是中文用户，则建议修改 language 的值为 zh-CN。 2.5 新建分类 categories 页categories 页是用来展示所有分类的页面，如果在你的博客 source 目录下还没有 categories/index.md 文件，那么你就需要新建一个，命令如下： hexo new page &quot;categories&quot; 编辑你刚刚新建的页面文件 /source/categories/index.md，至少需要以下内容： --- title: categories date: 2022-03-11 17:25:30 type: &quot;categories&quot; layout: &quot;categories&quot; --- 2.6 新建标签 tags 页tags 页是用来展示所有标签的页面，如果在你的博客 source 目录下还没有 tags/index.md 文件，那么你就需要新建一个，命令如下： hexo new page &quot;tags&quot; 编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容： --- title: tags date: 2022-03-11 18:23:38 type: &quot;tags&quot; layout: &quot;tags&quot; --- 2.7 新建关于我 about 页about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 source 目录下还没有 about/index.md 文件，那么你就需要新建一个，命令如下： hexo new page &quot;about&quot; 编辑你刚刚新建的页面文件 /source/about/index.md，至少需要以下内容： --- title: about date: 2022-03-11 17:25:30 type: &quot;about&quot; layout: &quot;about&quot; --- 2.8 新建留言板 contact 页（可选的）contact 页是用来展示留言板信息的页面，前提是已经开启了第三方评论系统才能显示。如果在你的博客 source 目录下还没有 contact/index.md 文件，那么你就需要新建一个，命令如下： hexo new page &quot;contact&quot; 编辑你刚刚新建的页面文件 /source/contact/index.md，至少需要以下内容： --- title: contact date: 2022-03-11 17:25:30 type: &quot;contact&quot; layout: &quot;contact&quot; --- 2.9 新建友情链接 friends 页（可选的）friends 页是用来展示友情链接信息的页面，如果在你的博客 source 目录下还没有 friends/index.md 文件，那么你就需要新建一个，命令如下： hexo new page &quot;friends&quot; 编辑你刚刚新建的页面文件 /source/friends/index.md，至少需要以下内容： --- title: friends date: 2022-3-11 21:25:30 type: &quot;friends&quot; layout: &quot;friends&quot; --- 同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示： [&#123; &quot;avatar&quot;: &quot;头像地址1&quot;, &quot;name&quot;: &quot;**1&quot;, &quot;introduction&quot;: &quot;**************, &quot;url&quot;: &quot;http:&#x2F;&#x2F;博客地址1&#x2F;&quot;, &quot;title&quot;: &quot;****&quot; &#125;, &#123; &quot;avatar&quot;: &quot;头像地址2&quot;, &quot;name&quot;: &quot;**2&quot;, &quot;introduction&quot;: &quot;*************&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;博客地址2&#x2F;&quot;, &quot;title&quot;: &quot;****&quot; &#125;] 2.10 一级菜单导航配置配置基本菜单导航的名称、路径url和图标icon 菜单导航名称可以是中文也可以是英文(如：Index或主页) 图标icon 可以在Font Awesome 中查找 menu: Index: url: &#x2F; icon: fas fa-home Tags: url: &#x2F;tags icon: fas fa-tags Categories: url: &#x2F;categories icon: fas fa-bookmark Archives: url: &#x2F;archives icon: fas fa-archive About: url: &#x2F;about icon: fas fa-user-circle Friends: url: &#x2F;friends icon: fas fa-address-book 2.11 二级菜单配置方法如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作 在需要添加二级菜单的一级菜单下添加children关键字(如:About菜单下添加children) 在children下创建二级菜单的 名称name,路径url和图标icon. 注意每个二级菜单模块前要加 -. 注意缩进格式 menu: Index: url: &#x2F; icon: fas fa-home Tags: url: &#x2F;tags icon: fas fa-tags Categories: url: &#x2F;categories icon: fas fa-bookmark Archives: url: &#x2F;archives icon: fas fa-archive About: url: &#x2F;about icon: fas fa-user-circle-o Friends: url: &#x2F;friends icon: fas fa-address-book Medias: icon: fas fa-list children: - name: Musics url: &#x2F;musics icon: fas fa-music - name: Movies url: &#x2F;movies icon: fas fa-film - name: Books url: &#x2F;books icon: fas fa-book - name: Galleries url: &#x2F;galleries icon: fas fa-image 执行 hexo clean &amp;&amp; hexo g 重新生成博客文件。 2.12 代码高亮由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，安装命令如下： npm i -S hexo-prism-plugin 然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下： highlight: enable: false prism_plugin: mode: &#39;preprocess&#39; # realtime&#x2F;preprocess theme: &#39;tomorrow&#39; line_number: false # default false custom_css: 2.13 搜索本主题中还使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下： npm install hexo-generator-search --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： search: path: search.xml field: post 2.14 文章字数统计插件（建议安装）如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount 插件。 安装命令如下： npm i --save hexo-wordcount 然后只需在本主题下的 _config.yml 文件中，将各个文章字数相关的配置激活即可： postInfo: date: true update: false wordCount: false # 设置文章字数统计为 true. totalCount: false # 设置站点文章总字数统计为 true. min2read: false # 阅读时长. readCount: false # 阅读次数. 2.15 添加 emoji 表情支持（可选的）本主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：:smile:）转变成会跳跃的emoji表情，安装命令如下： npm install hexo-filter-github-emojis --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： githubEmojis: enable: true className: github-emoji inject: true styles: customEmojis: 2.16 添加 RSS 订阅支持（可选的）本主题中还使用到了hexo-generator-feed 的 Hexo 插件来做 RSS，安装命令如下： npm install hexo-generator-feed --save 在 Hexo 根目录下的_config.yml 文件中，新增以下的配置项： feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: &#39; &#39; order_by: -date 执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明你已经安装成功了。 2.17 添加 DaoVoice 在线聊天功能（可选的）前往 DaoVoice 官网注册并且获取 app_id，并将 app_id 填入主题的 _config.yml 文件中。 2.18 添加 Tidio 在线聊天功能（可选的）前往 Tidio 官网注册并且获取 Public Key，并将 Public Key 填入主题的 _config.yml 文件中。 2.19 修改页脚页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 /layout/_partial/footer.ejs 文件中，包括站点、使用的主题、访问量等。 2.20 修改社交链接在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 /layout/_partial/social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码： &lt;% if (theme.socialLink.github) &#123; %> &lt;a href=\"&lt;%= theme.socialLink.github %>\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"访问我的GitHub\" data-position=\"top\" data-delay=\"50\" > &lt;i class=\"fab fa-github\">&lt;/i> &lt;/a> &lt;% &#125; %> 其中，社交图标（如：fa-github）你可以在 Font Awesome 中搜索找到。以下是常用社交图标的标识，供你参考： Facebook: fab fa-facebook Twitter: fab fa-twitter Google-plus: fab fa-google-plus Linkedin: fab fa-linkedin Tumblr: fab fa-tumblr Medium: fab fa-medium Slack: fab fa-slack Sina Weibo: fab fa-weibo Wechat: fab fa-weixin QQ: fab fa-qq Zhihu: fab fa-zhihu 注意: 本主题中使用的 Font Awesome 版本为 5.11.0。 2.21 修改打赏的二维码图片在主题文件的 source/medias/reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。 2.22 配置音乐播放器（可选的）要支持音乐播放，在主题的 _config.yml 配置文件中激活music配置即可 # 是否在首页显示音乐 music: enable: true title: #非吸底模式有效 enable: true show: 听听音乐 server: netease #require music platform: netease, tencent, kugou, xiami, baidu type: playlist #require song, playlist, album, search, artist id: ******* #require song id &#x2F; playlist id &#x2F; album id &#x2F; search keyword fixed: false # 开启吸底模式 autoplay: false # 是否自动播放 theme: &#39;#42b983&#39; loop: &#39;all&#39; # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39; order: &#39;random&#39; # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39; preload: &#39;auto&#39; # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39; volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效 listFolded: true # 列表默认折叠 提示： server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。 type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手） id获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，user的id即为这串数字。 2.23 文章 Front-matter 介绍Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。 配置选项 默认值 描述 title Markdown 的文件标题 文章标题，强烈建议填写此选项 date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一 author 根 _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云、Github 等)来做图片的路径.如: http://xxx.com/xxx.jpg top true 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章 cover false v1.0.2 版本新增，表示该文章是否需要加入到首页轮播封面中 coverImg 无 v1.0.2 版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 password 无 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项 toc true 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 mathjax false 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行 summary 无 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 无 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 tags 无 文章标签，一篇文章可以多个标签 keywords 文章标题 文章关键字，SEO 时需要 reprintPolicy cc_by 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 注意: 如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。 date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则 以下为文章的 Front-matter 示例。最全示例 --- title: theme主题介绍 date: 2022-03-11 09:25:00 author: ** img: &#x2F;source&#x2F;images&#x2F;xxx.jpg top: true cover: true coverImg: &#x2F;images&#x2F;1.jpg password: 858d1f6ecad5dfgd54d4r45451d73f5d5a86aff3ca12022dfs842 toc: false mathjax: false summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories: Typora tags: - Typora - Markdown - Hexo --- 2.24 自定制修改在本主题的 _config.yml 中可以修改部分自定义信息，有以下几个部分： 菜单 我的梦想 首页的音乐播放器和视频播放器配置 是否显示推荐文章名称和按钮配置 favicon 和 Logo 个人信息 TOC 目录 文章打赏信息 复制文章内容时追加版权信息 MathJax 文章字数统计、阅读时长 点击页面的’爱心’效果 我的项目 我的技能 我的相册 Gitalk、Gitment、Valine 和 disqus 评论配置 不蒜子统计和谷歌分析（Google Analytics） 默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图 如果本主题中的诸多功能和主题色彩你不满意，可以在主题的 _config.yml 中完成，需要修改源代码才来完成。 修改主题颜色 在主题文件的 /source/css/matery.css 文件中，搜索 .bg-color 来修改背景颜色： /* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */ .bg-color &#123; background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%); &#125; @-webkit-keyframes rainbow &#123; /* 动态切换背景颜色. */ &#125; @keyframes rainbow &#123; /* 动态切换背景颜色. */ &#125; body &#123; /* background-color: #eaeaea; */ /* 增加背景壁纸*/ background: url(\"https://*********************************\"), url(\"http://*************************\") 0px 0px; background-attachment: fixed; margin: 0; color: #34495e; &#125; 2.25 修改 banner 图和文章特色图你可以直接在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 JavaScript 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 &lt;script&gt;&lt;/script&gt; 代码中： $('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)'); 在 /source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。 2.26 优化目录栏在 themes\\Matery\\layout\\_partial\\post-detail-toc.ejs，修改内容如下： .toc-widget &#123; padding-left: 20px; width: 345px; background-color: rgb(255, 255, 255, 0.7); border-radius: 10px; box-shadow: 0 10px 35px 2px rgba(0, 0, 0, 0.15), 0 5px 15px rgba(0, 0, 0, 0.07), 0 2px 5px -5px rgba(0, 0, 0, 0.1) !important; &#125; #toc-content &#123; margin-bottom: 20px; &#125; 注：此文是本人在大佬的基础上进行修改优化，如有侵犯联系我删除。","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://haoqi7.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://haoqi7.github.io/tags/Github/"},{"name":"Hexo","slug":"Hexo","permalink":"https://haoqi7.github.io/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"https://haoqi7.github.io/tags/Blog/"},{"name":"Matery","slug":"Matery","permalink":"https://haoqi7.github.io/tags/Matery/"}],"author":"HaoQi"},{"title":"文章模板","slug":"文章模板","date":"2022-03-16T17:39:46.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/401e296e.html","link":"","permalink":"https://haoqi7.github.io/posts/401e296e.html","excerpt":"","text":"题目 释义 title Markdown 的文件标题 文章标题，强烈建议填写此选项 date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一 author _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图，推荐使用图床来 top 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章 cover 表示该文章是否需要加入到首页轮播封面中 coverImg 表示该文章在首页轮播封面需要显示的图片路径，如果没有则默认使用文章的特色图片 password 文章阅读密码，如果要对文章设置阅读验证密码的话，该值必须是用 SHA256 加密后的密码。前提是在主题的 config.yml 中激活了 verifyPassword 选项 toc （目录）是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 mathjax 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行 summary 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 tags 文章标签，一篇文章可以多个标签 reprintPolicy 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 comment 评论 abbrlink 文章唯一链接 示例： title: theme date: 2022-03-016 09:25:00 author: HaoQi img: &#x2F;source&#x2F;images&#x2F;xxx.jpg top: true cover: true coverImg: &#x2F;images&#x2F;1.jpg password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 toc: false mathjax: false summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories: Markdown tags: - Typora - Markdown","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://haoqi7.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"},{"name":"template","slug":"template","permalink":"https://haoqi7.github.io/tags/template/"}],"author":"HaoQi"},{"title":"hexo加入豆瓣页面","slug":"Douban","date":"2022-03-15T10:25:00.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/216e769b.html","link":"","permalink":"https://haoqi7.github.io/posts/216e769b.html","excerpt":"","text":"1 安装豆瓣插件npm install hexo-douban --save 2 配置文件在博客站点目录的配置文件_config.yml 下，添加如下配置： douban: user: *** #这个需要修改为你个人的id builtin: true #如果想生成豆瓣页面，这个需要设置为true book: title: &#39;This is my book title&#39; quote: &#39;This is my book quote&#39; movie: title: &#39;This is my movie title&#39; quote: &#39;This is my movie quote&#39; game: title: &#39;This is my game title&#39; quote: &#39;This is my game quote&#39; timeout: 10000 user:：你的豆瓣 ID。打开豆瓣，登入账户，然后在右上角点击 ” 个人主页 “，这时候地址栏的 URL 大概是这样：https://www.douban.com/people/xxxxxx/ ，其中的”xxxxxx” 就是你的个人 ID 了。builtin：是否将生成页面的功能嵌入 hexo s 和 hexo g 中，默认是 false ，另一可选项为 true 。title： 该页面的标题。quote： 写在页面开头的一段话，支持 html 语法。timeout： 爬取数据的超时时间，默认是 10000ms，如果在使用时发现报了超时的错 (ETIMEOUT) 可以把这个数据设置的大一点。如果只想显示某一个页面 (比如 movie)，那就把其他的配置项注释掉即可。 然后再主题配置文件_config.yml 中添加关于此页面的菜单：(下面是我的配置) 媒体: url: &#x2F;movies icon: fas fa-heartbeat children: - name: 电影 url: &#x2F;movies icon: fas fa-film - name: 书单 url: &#x2F;books icon: fas fa-book - name: 游戏 url: &#x2F;games icon: fas fa-gamepad 3 适配 matery 主题在 /themes/hexo-theme-matery/layout 文件夹下面创建一个名为 douban.ejs 的文件，并将下面的内容复制进去： &lt;%- partial(&#39;_partial&#x2F;post-cover&#39;) %&gt; &lt;style&gt; .hexo-douban-picture img &#123; width: 100%; &#125; &lt;&#x2F;style&gt; &lt;main class&#x3D;&quot;content&quot;&gt; &lt;div id&#x3D;&quot;contact&quot; class&#x3D;&quot;container chip-container&quot;&gt; &lt;div class&#x3D;&quot;card&quot;&gt; &lt;div class&#x3D;&quot;card-content&quot; style&#x3D;&quot;padding: 30px&quot;&gt; &lt;h1 style&#x3D;&quot;margin: 10px 0 10px 0px;&quot;&gt;&lt;%&#x3D; page.title %&gt;&lt;&#x2F;h1&gt; &lt;%- page.content %&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;card&quot;&gt; &lt;div class&#x3D;&quot;card-content&quot; style&#x3D;&quot;text-align: center&quot;&gt; &lt;h3 style&#x3D;&quot;margin: 5px 0 5px 5px;&quot;&gt;如果你有好的内容推荐，欢迎在下面留言！&lt;&#x2F;h3&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;card&quot;&gt; &lt;% if (theme.gitalk &amp;&amp; theme.gitalk.enable) &#123; %&gt; &lt;%- partial(&#39;_partial&#x2F;gitalk&#39;) %&gt; &lt;% &#125; %&gt; &lt;% if (theme.gitment.enable) &#123; %&gt; &lt;%- partial(&#39;_partial&#x2F;gitment&#39;) %&gt; &lt;% &#125; %&gt; &lt;% if (theme.disqus.enable) &#123; %&gt; &lt;%- partial(&#39;_partial&#x2F;disqus&#39;) %&gt; &lt;% &#125; %&gt; &lt;% if (theme.livere &amp;&amp; theme.livere.enable) &#123; %&gt; &lt;%- partial(&#39;_partial&#x2F;livere&#39;) %&gt; &lt;% &#125; %&gt; &lt;% if (theme.valine &amp;&amp; theme.valine.enable) &#123; %&gt; &lt;%- partial(&#39;_partial&#x2F;valine&#39;) %&gt; &lt;% &#125; %&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;main&gt; 4 修改配置文件在博客站点目录下的 node_modules 文件夹下找到 hexo-douban/lib，文件夹下有三个 js 文件，分别为：books-generator.js 、games-generator.js 、movies-generator.js，用文本编辑器打开这三个文件，并将其文件内容末尾的代码修改为一下内容： /_ 原文件内容为 layout: [_page_, _post_] ，将其修改为下面的内容_/ layout: [page, douban] 最后就是使用并生成相应的页面，执行命令如下: hexo douban 5 注意事项1.node.js 版本为 12.20.2，才能抓取豆瓣页面。我的 hexo -v 6.0.0 npm -v 6.14.11。 2.抓取豆瓣。 -h, --help # 帮助页面 -b, --books # 只生成书单页面 -g, --games # 只生成游戏页面 -m, --movies # 只生成电影页面 3.一天抓取次数达上限将抓取为 0，次日恢复抓取。","categories":[{"name":"插件篇","slug":"插件篇","permalink":"https://haoqi7.github.io/categories/%E6%8F%92%E4%BB%B6%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"},{"name":"douban","slug":"douban","permalink":"https://haoqi7.github.io/tags/douban/"}],"author":"HaoQi"},{"title":"思维导图","slug":"思维导图","date":"2022-03-13T17:31:55.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/6c27b784.html","link":"","permalink":"https://haoqi7.github.io/posts/6c27b784.html","excerpt":"","text":"推荐一款在 github 的开源项目 hexo-markmap。 hexo-markmap在你的博客中使用 markdown 插入思维导图，使用 markmap。 安装npm install hexo-markmap 或 yarn add hexo-markmap 使用&#123;% markmap 300px %&#125; - Testa - test1 - test2 - Testb - test1 - test2 &#123;%endmarkmap%&#125; 效果预览 .markmap-container{display:flex;justify-content:center;margin:0 auto;width:90%;height:500px}.markmap-container svg{width:100%;height:100%}@media(max-width:768px){.markmap-container{height:400px}} document.querySelectorAll('.markmap-container>svg').forEach(mindmap => markmap.Markmap.create(mindmap, null, JSON.parse(mindmap.getAttribute('data'))))","categories":[{"name":"插件篇","slug":"插件篇","permalink":"https://haoqi7.github.io/categories/%E6%8F%92%E4%BB%B6%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"},{"name":"思维导图","slug":"思维导图","permalink":"https://haoqi7.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"}],"author":"HaoQi"},{"title":"陶瓷和紫砂哪个更好？","slug":"陶瓷和紫砂哪个更好？","date":"2022-03-13T10:44:07.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/86fb1398.html","link":"","permalink":"https://haoqi7.github.io/posts/86fb1398.html","excerpt":"","text":"陶瓷和紫砂哪个更好？陶瓷陶瓷包含了陶器和瓷器两种，两者的区别在于，使用材料和烧成温度不同，两者缺一不可。陶器：可以使用包括瓷土在内的各种矿物粘土制作，烧成温度较低，多在 700—1000℃ 之间，胎体烧结完全度高，没有发生瓷化现象，敲击之声较沉闷。瓷器：使用的是氧化铝含量较高的瓷土（即高岭土）烧制。瓷器的烧成温度至少在 1100℃ 以上，胎质基本瓷化，敲击之声清脆。紫砂紫砂：由紫砂泥制成，严格来说，紫砂也是属于是陶的一种。 紫砂的优势既不夺香，又无熟汤气《长物志》说它“既不夺香，又无熟汤气”。这是因为紫砂保味功能好，泡茶不失原味，更无茶具本身所带的异味，聚香含淑，色、香、味俱佳。 夏日越宿不馊所谓的越宿不馊并不是指把喝不完的茶汤放在紫砂壶里，隔夜后第二天还不馊，甚至还可以饮用，这恐怕连冰箱都做不到。 紫砂壶的陶质壶盖有孔，能吸收水蒸汽，不至在盖上形成水珠，滴在茶水中搅动茶水，加速茶水的发酵。而一般陶瓷茶具，器壁光滑，渗透性差，其凝聚的水珠滴落后，使茶水频繁搅动，容易促使霉菌繁殖，造成茶水发酵。即使是茶汤真的变质了也不会起腻苔，方便清理。盈润包浆紫砂壶长久使用，器身会因茶汤的滋养而变得越发光润可爱。闻龙在《茶牋 jiǎn》中说：“摩掌宝爱，不啻掌珠。用之既久，外类紫玉，内如碧云。” 陶瓷的优势种类繁多陶瓷种类比起紫砂来说非常丰富，在古代官哥汝定钧五大名窑就已经扬名海外，种类繁多。现在，随着工艺的进步与提升，泥料的配比越来越丰富。 制作效率高，首次获取成本低普通陶瓷茶具有拉坯成型，模具半手工成型，注浆成型。而正宗的紫砂大一律采用全手工和半手工的成型方法（注浆与手拉胚会破坏紫砂的特性）。因此陶瓷的制作效率是大大高于紫砂的，因此就普通实用器的角度来说，一般陶瓷器的获得成本比紫砂也更低。 区别起源不同紫砂：紫砂壶的起源一直可以上溯到春秋时代的越国大夫范蠡，有二千四百多年的历史。陶瓷：约公元前 8000－2000 年（新石器时代）发明了陶器。 原料不同紫砂：以紫砂为泥原料，主要分为紫泥、绿泥和红泥三种。陶瓷：是以天然粘土以及各种天然矿物为主要原料经过粉碎混炼、成型和煅烧制得的材料的各种制品。 颜色不同紫砂：紫砂器的泥色有多种，俗称“五色土”，除去主要“五色”的朱泥、紫泥、段泥、黑泥、墨绿泥外，尚有白泥、乌泥、黄泥、松花泥等各种色泽，紫砂器不挂釉，而是充分利用泥本色烧成。紫砂陶质地古朴纯厚，不媚不俗。","categories":[{"name":"紫砂壶篇","slug":"紫砂壶篇","permalink":"https://haoqi7.github.io/categories/%E7%B4%AB%E7%A0%82%E5%A3%B6%E7%AF%87/"}],"tags":[{"name":"陶瓷","slug":"陶瓷","permalink":"https://haoqi7.github.io/tags/%E9%99%B6%E7%93%B7/"},{"name":"紫砂","slug":"紫砂","permalink":"https://haoqi7.github.io/tags/%E7%B4%AB%E7%A0%82/"}],"author":"HaoQi"},{"title":"工具分享（一）","slug":"Dev-sidecar","date":"2022-03-12T22:13:08.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/15639690.html","link":"","permalink":"https://haoqi7.github.io/posts/15639690.html","excerpt":"","text":"分享一款可以自由访问 Github 以及自由更换 npm 源的工具，以下内容取自作者 README 的描述，本人只做分享。 项目地址：https://gitee.com/docmirror/dev-sidecar dev-sidecar开发者边车，命名取自 service-mesh 的 service-sidecar，意为为开发者打辅助的边车工具（以下简称 ds） 通过本地代理的方式将 https 请求代理到一些国内的加速通道上 ——————————重要提醒 1——————————— 注意：由于 electron 无法监听 windows 的关机事件，开着 ds 情况下直接重启电脑，会导致无法上网，你可以手动启动 ds 即可恢复网络，你也可以将 ds 设置为开机自启。 ——————————重要提醒 2——————————— 注意：本应用启动会自动修改系统代理，所以会与其他 vpn、fq 等代理软件有冲突，请务必不要一起使用。 本应用主要目的在于直连访问 github，如果你已经有飞机了，那建议还是不要用这个自行车（ds）了 一、 特性1、 dns 优选（解决***污染问题） 根据网络状况智能解析最佳域名 ip 地址，获取最佳网络速度 解决一些网站和库无法访问或访问速度慢的问题 建议遇到打开比较慢的国外网站，可以优先尝试将该域名添加到 dns 设置中（注意：被***封杀的无效） 2、 请求拦截 拦截打不开的网站，代理到加速镜像站点上去。 可配置多个镜像站作为备份 具备测速机制，当访问失败或超时之后，自动切换到备用站点，使得目标服务高可用 3、 github 加速 github 直连加速 (通过修改 sni 实现，感谢 fastGithub 提供的思路) release、source、zip 下载加速 clone 加速 头像加速 解决 readme 中图片引用无法加载的问题 gist.github.com 加速 解决 git push 偶尔失败需要输入账号密码的问题（fatal: TaskCanceledException encountered / fatal: HttpRequestException encountered） raw/blame 加速 以上部分功能通过X.I.U的油猴脚本实现， 以下是仓库和脚本下载链接，大家可以去支持一下。 https://github.com/XIU2/UserScript https://greasyfork.org/scripts/412245 由于此脚本在 ds 中是打包在本地的，更新会不及时，你可以直接通过浏览器安装油猴插件使用此脚本，从而获得最新更新（ds 本地的可以通过加速服务-&gt;基本设置-&gt;启用脚本进行关闭）。 4、 Stack Overflow 加速 将 ajax.google.com 代理到加速 CDN 上 recaptcha 图片验证码加速 5、 npm 加速 支持开启 npm 代理 官方与淘宝 npm registry 一键切换, 某些 npm install 的时候，并且使用 cnpm 也无法安装时，可以尝试开启 npm 代理再试 安全警告： 请勿使用来源不明的服务地址，有隐私和账号泄露风险 本应用及服务端承诺不收集任何信息。介意者请使用安全模式。 二、快速开始支持 windows、Mac、Linux(Ubuntu) DevSidecar 桌面应用1 下载安装包 release 下载 Gitee Release Github Release Windows: 请选择 DevSidecar-x.x.x.exe Mac: 请选择 DevSidecar-x.x.x.dmg Ubuntu: 请选择 DevSidecar-x.x.x.deb 其他 linux: 请选择 DevSidecar-x.x.x.AppImage (未做测试，不保证能用) linux 安装说明请参考 linux 安装文档 注意：由于没有买应用证书，所以应用在下载安装时会有“未知发行者”等安全提示，选择保留即可。 2 安装后打开 注意：mac 版安装需要在“系统偏好设置-&gt;安全性与隐私-&gt;通用”中解锁并允许应用安装 3 安装根证书第一次打开会提示安装证书，根据提示操作即可 根证书是本地随机生成的，所以不用担心根证书的安全问题（本应用不收集任何用户信息） 你也可以在加速服务设置中自定义根证书（PEM 格式的证书与私钥） 火狐浏览器需要手动安装证书 4 开始加速吧去试试打开 github 三、模式说明安全模式 此模式：关闭拦截、关闭增强、开启 dns 优选、开启测速 最安全，无需安装证书，可以在浏览器地址栏左侧查看域名证书 功能也最弱，只有特性 1，相当于查询 github 的国外 ip，手动改 hosts 一个意思。 github 的可访问性不稳定，取决于 IP 测速，如果有绿色 ip 存在，就 有可能 可以直连访问。 默认模式 此模式：开启拦截、关闭增强、开启 dns 优选、开启测速 需要安装证书，通过修改 sni 直连访问 github 功能上包含特性 1/2/3/4。 四、 最佳实践 把 dev-sidecar 一直开着就行了（注意 windows 下开着 ds 重启电脑，会无法上网，重新打开 ds 即可。） 建议遇到打开比较慢的国外网站，可以尝试将该域名添加到 dns 设置中（注意：被 GFW 封杀的无效） 其他加速 git clone 加速 方式 1：快捷复制： 开启脚本支持，然后在复制 clone 链接下方，即可复制到加速链接 方式 2： 使用方式用实际的名称替换{}的内容，即可加速 clone https://hub.fastgit.org/{username}/{reponame}.git clone 出来的 remote “origin” 为 fastgit 的地址，需要手动改回来 你也可以直接使用他们的 clone 加速工具 fgit-go github.com 的镜像网站(注意：不能登录) hub.fastgit.org github.com.cnpmjs.org 这个很容易超限 五、api拦截配置没有配置域名的不会拦截，其他根据配置进行拦截处理 const intercepts = &#123; // 要拦截的域名 \"github.com\": &#123; //需要拦截url的正则表达式 \"/.*/.*/releases/download/\": &#123; //拦截类型 // redirect:url, 临时重定向(url会变，一些下载资源可以通过此方式配置) // proxy:url, 代理（url不会变，没有跨域问题） // abort:true, 取消请求（适用于被GFW封锁的资源，找不到替代，直接取消请求，快速失败，节省时间） // success:true, 直接返回成功请求（某些请求不想发出去，可以伪装成功返回） redirect: \"download.fastgit.org\", &#125;, \".*\": &#123; proxy: \"github.com\", sni: \"baidu.com\", //修改sni，规避***握手拦截 &#125;, &#125;, \"ajax.googleapis.com\": &#123; \".*\": &#123; proxy: \"ajax.loli.net\", //代理请求，url不会变 backup: [\"ajax.proxy.ustclug.org\"], //备份，当前代理请求失败后，将会切换到备用地址 test: \"ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\", replace: \"/(.*)/xxx\", //当加速地址的链接和原链接不是完全相同时，可以通过正则表达式replace，此时proxy通过$1$2来重组url， proxy:'ajax.loli.net/xxx/$1' &#125;, &#125;, \"clients*.google.com\": &#123; \".*\": &#123; abort: true, //取消请求，被GFW封锁的资源，找不到替代，直接取消请求，快速失败，节省时间 &#125;, &#125;, &#125;; DNS 优选配置某些域名解析出来的 ip 会无法访问，（比如 api.github.com 会被解析到新加坡的 ip 上，新加坡的服务器在上午挺好，到了晚上就卡死，基本不可用） 通过从 dns 上获取 ip 列表，切换不同的 ip 进行尝试，最终会挑选到一个最快的 ip dns: &#123; mapping: &#123; // 'api.github.com': 'usa', // \"解决push的时候需要输入密码的问题\", 'gist.github.com': 'usa' // 解决gist无法访问的问题 \"*.githubusercontent.com\": \"usa\" // 解决github头像经常下载不到的问题 &#125; &#125;, 注意：暂时只支持 IPv4 的解析 六、问题排查1、dev-sidecar 的前两个开关没有处于打开状态 尝试将开关按钮手动打开 请尝试右键 dev-sidecar 图标，点退出。再重新打开 如果还不行，请将日志发送给作者 如果是 mac 系统，可能是下面的原因 Mac 系统使用时，首页的系统代理开关无法打开出现这个问题可能是没有开启系统代理命令的执行权限 networksetup -setwebproxy &#39;WiFi&#39; 127.0.0.1 1181 #看是否有如下错误提示 ** Error: Command requires admin privileges. 如果有上面的错误提示，请尝试如下两种方法： 1、 取消访问偏好设置需要管理员密码 系统偏好设置—&gt;安全性与隐私—&gt; 通用—&gt; 高级—&gt; 访问系统范围的偏好设置需要输入管理员密码（取消勾选） 2、 可能是由于安装了 xcode，但未授权导致 请在终端输入如下命令进行授权 sudo xcodebuild -license # 一直按回车，该agree的时候输入agree即可 然后再次尝试看是否能够打开系统代理开关 如果还不行，请联系作者 2、没有加速效果本应用仅支持 https 加速，请务必确认你访问的网站地址是 https 开头的 本应用仅支持 https 加速 请务必确认你访问的地址是 https 开头的 比如： https://github.com/ 检查浏览器是否装了什么插件，与 ds 有冲突 检查是否安装了其他代理软件，与 ds 有冲突 请确认浏览器的代理设置为使用 IE 代理/或者使用系统代理状态 可以尝试换个浏览器试试 请确认网络代理设置处于勾选状态 正常情况下 dev-sidecar 在“系统代理”开关打开时，会自动设置代理。 3、浏览器打开提示证书不受信任 windows: 请确认证书已正确安装在“信任的根证书颁发机构”下 mac: 请确认证书已经被安装并已经设置信任。 火狐浏览器：火狐浏览器不走系统的根证书，需要在选项中添加根证书 1、火狐浏览器-&gt;选项-&gt;隐私与安全-&gt;证书-&gt;查看证书 2、证书颁发机构-&gt;导入 3、选择证书文件C:\\Users(用户)\\Administrator(你的账号)\\.dev-sidecar\\dev-sidecar.ca.crt（Mac 或 linux 为~/.dev-sidecar目录） 4、勾选信任由此证书颁发机构来标识网站，确定即可 4. 打开 github 显示连接超时DevSidecar Warning: Error: www.github.com:443, 代理请求超时 如果是安全模式，则是因为不稳定导致的，等一会再刷新试试 如果是增强模式，则是由于访问人数过多，正常现象 5、某些原本可以打开的网站打不开了1、可以尝试关闭 pac 2、可以将域名加入白名单 6、应用意外关闭导致没有网络了应用开启后会自动修改系统代理设置，正常退出会自动关闭系统代理 当应用意外关闭时，可能会因为没有将系统代理恢复，从而导致完全无法上网。 对于此问题有如下几种解决方案可供选择： 1、重新打开应用即可（右键应用托盘图标可完全退出，将会正常关闭系统代理设置） 2、如果应用被卸载了，此时需要手动关闭系统代理设置 3、如果你是因为开着 ds 的情况下重启电脑导致无法上网，你可以设置 ds 为开机自启 7、卸载应用后上不了网，git 请求不了如果你在卸载应用前，没有正常退出 app，就有可能无法上网。请按如下步骤操作恢复您的网络： 1、关闭系统代理设置，参见：手动关闭系统代理设置 2、执行下面的命令关闭 git 的代理设置(如果你开启过 git.ext 的开关) git config --global --unset http.proxy git config --global --unset https.proxy 3、执行下面的命令关闭 npm 的代理设置(如果你开启过 npm 加速的开关) npm config delete proxy npm config delete https-proxy","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://haoqi7.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://haoqi7.github.io/tags/Github/"},{"name":"npm","slug":"npm","permalink":"https://haoqi7.github.io/tags/npm/"}],"author":"HaoQi"},{"title":"紫砂壶介绍","slug":"紫砂壶介绍","date":"2022-03-11T15:05:47.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/55f6848b.html","link":"","permalink":"https://haoqi7.github.io/posts/55f6848b.html","excerpt":"","text":"平定陶冶历史悠久，原材料质优量丰，手艺人技高数多。据山西《平定县志》记载：晚清民国时，平定有手工陶业作坊，皆生产日用陶器。后经有识之士提议，聘请宜兴紫砂名匠，指导制做出了色泽自然，淳朴古雅的具有地方风韵的砂器。 平定紫砂，器类丰富，造型多样，装饰各异，尤其“仿生树桩”装饰风格与金文、诗句、绘画装饰搭配，颇具特色，其中所蕴含的那种文人雅趣与平定“文献名邦”的精神内核相得益彰，故诞生之后即名噪一时，“堪与南制货物（宜兴紫砂）相媲美”，逐渐形成，“南宜兴，北平定”的品牌格局，成为一张响亮的文化名。 为了弘扬传统文化，本期收藏版立足古州，特精选这些具有代表性的平定紫砂作品，和读者共赏。铺首衔环汉洗铭对瓶，椭圆口，直颈，斜肩，长方体身，座足外撇。肩下饰贴塑模印 38 个寿字，瓶身左右各塑铺首衔环，底座饰贴塑蕉叶纹。方瓶的一面刻篆书“章和元年堂狼造”及隶书“摹汉章和洗铭七字白纯束敬制”等字样，另一面刻山水图：崇山层峦叠嶂，松树挺拔葳蕤。并题诗“翠叠春山又几重，绿阴深处万千松。熏风更带微寒意，吹得诗翁策短筇云亭”等，底款为“平定陶业公司”六字篆书。 此对瓶器型巨大，胎体细腻，是平定紫砂的精品。首衔环是汉代画像石刻的一种图案，它是由饕餮逐渐演化而来。饕餮是一种中国传统的神兽，因为这种神兽凶恶、贪婪，所以一般让其衔环，作为铺首置于大门上，用以驱邪，在此起装饰作用。“章和元年堂狼造”是描摹汉章和洗铭上的篆书。 洗铭文字是刻在铜洗底部的文字，洗是古人盥洗时用来盛水的器皿，相当于现在的脸盆。因为主要使用青铜器铸造而成，人们习惯把它们称为铜洗或青铜洗，又因为今天存世的铜洗多为汉代制造，人们又把它们称为汉洗。它最早出现在战国晚期，《仪礼》“设洗直于东荥”，郑玄注：“洗，所以承盥者弃水器也。”洗一般作圆形，敞口，直腹或敛腹，平底，有的器壁两侧有辅首衔环，内底常有双鱼或羊做装饰，铭文多见吉祥语或纪年铭。章和是东汉汉章帝刘炟的年号，章和元年就是公元 87 年。此铭应该是纪年铭。 “富贵寿考”插屏，平面长方形，高 40 厘米，宽 29.5 厘米，紫砂胎质。正面红釉，剔刻牡丹，几束盛开的牡丹，花朵鲜艳夺目，层次分明，叶子脉络清晰，舒卷自如，好似微风吹拂中婆娑起舞，极有动感，又如一位国色天香的姑娘，翩翩起舞，楚楚动人。行刻流畅，刀法俊逸爽利。左上角雕刻有“金衣瑞羽”四字，以及“乙丑孟冬之月””平定厂””南云刻”字样，交代了插屏制作的时间、制作的工厂和雕刻之人。背面黑釉，刻题富贵寿考，下为叙事长文，落款内务部记名前平定县知事吉廷彦敬题。整件作品书画兼具、相得益彰，体现了平定紫砂素雅的特性。 该插屏为文房陈设用器。为时任平定知县的吉廷彦在转任前送于山西巡按使金道坚的礼物。插屏内文记述了吉廷彦为官之初即受知于金道坚，并在金升任山西巡按使后前往拜谒，对谈获知这位按台大人在负责山西全境治安之时，体察民间疾苦、整饬吏治、诛缴匪徒，使得民心安定、路人称颂的事迹。作为一心为民的清官，吉廷彦定是倍感鼓舞，故在即将转任的 1915 年冬，特意让平定工厂制作了一方紫砂插镜赠与金大人，以谢知遇之恩。而 1915 年正是平定紫砂改良大获成功之年，该插屏也成为平定紫砂的早期代表作品。 紫砂五件供器，红紫砂材质，由香炉 1 件、烛台 1 对、花觚 1 对组成。香炉呈鼎式，子母口，沿上有双耳、束颈、鼓腹，腹面阴刻“日利千金”四字，腹下有三足，足上兽头虎足，烛台小口，长颈，下有托盘，座束腰，近足处外撇。花觚大撇口，长颈，球腹，足外撇。器物釉面红润，造型规整，素朴文静，高贵雅致，且一套完整，不失为见证民国时期社平定社会文化风貌和紫砂生产工艺难得一见的珍品。 五供，是民间祭祀用盛供品的五件器皿，又称泰山五供、佛前五供。由香炉一只、烛台与花觚各一对组成，香炉为点香礼神之用，花觚为供花之用，烛台为点灯之用，五件器皿成一套，合称五供。摆放于宗祠庙宇，祭奠先祖（或信徒供奉神、佛）用来安放香、花、灯、水、果等供品。 五供一般有玉石、铜、锡、瓷、珐琅等材质，大多工艺考究、造型古朴。道教中，称五供为五献。在拜表、炼度、施食等仪式中都有五供一节。其法乃是将五种献祭品，即香、花、灯、水、果献于神坛之上，道士称：五献皆圆满，奉上众真前，志在求忏悔，亡者早升天。 “三友”红泥壶，口径长 34 厘米，底径 48 厘米，高 14 厘米，方口，束颈，扁腹。松干形凸钮，竹节形弯流，梅干形曲柄，造型独具匠心。一面口沿下刻“逸民氏制”，字下五片竹叶，翠竹一枝与流相接。另一面沿下刻“三友”，三朵梅花绽放，两朵含苞欲放，一分为二的梅枝从柄上横斜而出。松干形盖钮坑坑洼洼，上端枝上结着六个松球。竹宁折不屈，梅傲然挺立，松四季长春，民间的“岁寒三友”在此集于一身，让人看了不由肃然起敬。底款为“平定复新工厂”篆书。 “三友”即“岁寒三友”，指的是坚忍不拔的苍松、直节中空的翠竹、傲雪凌霜的寒梅，因为三者都有终年不凋、刚毅坚韧的高洁风格，所以被世人美称为“岁寒三友”，是人格高尚的象征。苍松在万物萧疏的隆冬依旧郁郁葱葱、精神抖擞，象征着青春常在和坚强不屈，在文人墨客的心目中有着极高的地位。翠竹因竹茎中空而喻谦虚，竹节分明而喻有节操，常年不凋、坚贞挺拔而喻高风亮节，备受文人雅士的青睐。梅花因不畏寒冬、傲然卓立的高贵品格，同样也深受文人雅士的喜爱，故称君子当坚贞如梅。 逸民即江祖臣，字案卿，江苏宜兴人，清末民初制壶好手，人称“狮球王”。民国四年，和吴云根等四人到到山西平定平民陶器厂任技师,传授制陶技艺，这把“三友”紫砂壶，就是当时江祖臣在平定烧制的紫砂壶。孔雀蓝挂釉紫砂竹节壶，沿口、短颈、鼓肩、筒形腹、矮圈足，高 6 厘米，口径 5.8 厘米，底径 6.5 厘米。造型取材于竹子，竹腹一节，粗壮扁矮，稳重而挺拔。壶流二节，刚直遒劲。通体施孔雀蓝釉，釉面光洁细薄，釉色鲜亮明艳，古穆而不失幽靓，观之赏心悦目。一面用墨彩书“兰为王者香”五个楷书大字及“平民工厂出品”六个小字；一面用简略的笔画绘墨彩兰花一束，几片纤细的的叶子，几朵淡淡的小花，淡雅而婀娜。器底素胎，款识为“平定知事吉廷彦监制”篆书。不过，令人遗憾的是，壶把损坏，壶盖丢失。 吉廷彦，字硕卿，号东圆，山西翼城人。民国二至六年担任平定县知事。曾挂帅参与平定砂器改良，使平定紫砂获得了新生，发扬光大。 紫砂挂釉是借鉴瓷器施釉工艺形成的产品，它是在烧成的紫砂素器上施釉上彩，再入窑进行二次，甚至多次烧制而成的，工艺复杂、耗时费力、制作成本高。紫砂挂釉工艺让紫砂器有了跟多的表现形式，满足了人们的审美需求，也使日常清洁护理更加方便。但是釉料掩盖了紫砂固有的天然肌理，也将紫砂泥特有的透气性埋没掉，不利于散热、保鲜、驻味，故一般不在茶壶上使用。平定的紫砂挂釉器物，釉面光亮，釉层较厚，不透明。造型多样，主要应用在笔筒、水盂、印盒等文房用品和瓶、盘、盆、罐等陈设品上。 注：本篇素材取自互联网，用于宣传紫砂文化。 版权归原作者所有，侵权请联系本站删除。","categories":[{"name":"紫砂壶篇","slug":"紫砂壶篇","permalink":"https://haoqi7.github.io/categories/%E7%B4%AB%E7%A0%82%E5%A3%B6%E7%AF%87/"}],"tags":[{"name":"平定","slug":"平定","permalink":"https://haoqi7.github.io/tags/%E5%B9%B3%E5%AE%9A/"},{"name":"紫砂壶","slug":"紫砂壶","permalink":"https://haoqi7.github.io/tags/%E7%B4%AB%E7%A0%82%E5%A3%B6/"}],"author":"HaoQi"},{"title":"如何查找论文","slug":"如何查找论文","date":"2022-03-11T14:55:20.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/5b9c8c97.html","link":"","permalink":"https://haoqi7.github.io/posts/5b9c8c97.html","excerpt":"","text":"如何查找论文文献资料？在我们平时写论文的时候我们都会使用到相关的文献资料，但是我们应该如何去寻找论文文献资料呢？ 1.中国知网我们在百度的对话框里面输入相关的网站地址，如下图所示。 进入相关的网站后，我们就可以看到下面的界面。我们在搜索菜单里面输入要搜索论文文献的主题。 2.爱学术我们在百度的对话框里面输入相关的网站地址，如下图所示。 进入相关的网站后，我们就可以看到下面的界面。我们在搜索菜单里面输入要搜索论文文献的主题。 3.百度学术我们在百度的对话框里面输入相关的网站地址，如下图所示。 进入相关的网站后，我们就可以看到下面的界面。我们在搜索菜单里面输入要搜索论文文献的主题。 4.google 学术 5 更多可以访问导航网址，里面有各种文献网址这里不一一介绍。 后续会更新关于文献下载的方法，敬请期待！","categories":[{"name":"文献篇","slug":"文献篇","permalink":"https://haoqi7.github.io/categories/%E6%96%87%E7%8C%AE%E7%AF%87/"}],"tags":[{"name":"查找","slug":"查找","permalink":"https://haoqi7.github.io/tags/%E6%9F%A5%E6%89%BE/"},{"name":"论文","slug":"论文","permalink":"https://haoqi7.github.io/tags/%E8%AE%BA%E6%96%87/"},{"name":"文献","slug":"文献","permalink":"https://haoqi7.github.io/tags/%E6%96%87%E7%8C%AE/"}],"author":"HaoQi"},{"title":"Hexo-绕过渲染","slug":"Hexo-xr","date":"2022-03-11T14:35:09.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/17a22bd2.html","link":"","permalink":"https://haoqi7.github.io/posts/17a22bd2.html","excerpt":"","text":"1 Hexo 渲染在 Hexo 部署时会默认渲染 source 下的所有 html 页面，但有时候想在 Hexo 博客上单独自定义 html 页面或 README.md 时，却不希望被 Hexo 渲染。因此对某个文件或者目录进行排除渲染是非常必要的。 2 方法一：font matterHexo新建网站页面，然后将你的代码直接写入 index.md 中 在 Front matter 中添加 layout: false，此方法适用于单一的纯HTMLCSS 页面。 --- title: tools date: 2022-03-11 00:00:00 type: &quot;tools&quot; layout: false --- 3 方法二：skip render在博客根目录下的 _config.yml，找到 skip_render，大概在 32 行左右，写入你想要的跳过渲染的路径，注意缩进和空格。 # 指定目录跳过hexo渲染 skip_render: - &#39;tools&#x2F;*&#39; - &#39;tools&#x2F;**&#39; 注释：tools/* 表示在目录 source/fireworks 下的文件全部跳过渲染，tools/** 表示在博客根目录 source/tools/ 文件夹下的文件全部跳过渲染（例如页面的 js、css 在另一个文件夹中）。 4 案例：webstack 导航webstack是一个纯静态的网址导航网站，内容均由viggo收集并整理。项目基于bootstrap前端框架开发。 Github：https://github.com/WebStackPage/WebStackPage.github.io 在博客根目录 source/下新建tools，然后新建index.html,将webstack网页源码全选复制粘贴到里面。 然后打开博客根目录下配置文件_config.yml，找到skip_render，做如下修改： skip_render: - &#39;tools&#x2F;*&#39; - &#39;tools&#x2F;**&#39; 最后执行hexo clean和hexo s -g本地预览，检查无误后hexo g -d部署到服务器上即可。 注：此文是本人在大佬的基础上进行修改，如有侵犯联系我删除。","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://haoqi7.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://haoqi7.github.io/tags/Hexo/"},{"name":"渲染","slug":"渲染","permalink":"https://haoqi7.github.io/tags/%E6%B8%B2%E6%9F%93/"}],"author":"HaoQi"},{"title":"PicGo-Github","slug":"PicGo-Github","date":"2022-03-10T14:35:41.000Z","updated":"2023-01-22T13:36:43.426Z","comments":true,"path":"posts/9ea70054.html","link":"","permalink":"https://haoqi7.github.io/posts/9ea70054.html","excerpt":"","text":"前言我一直在用的 GitHub 图床，方便快捷，搭建起来也比较方便，还没有限制。 1 PicGO 介绍PicGo 是一款图片上传工具，目前支持多个图床。其中 GitHub 比较免费且最可靠的。 GitHub 地址：https://github.com/Molunerfinn/PicGo 2 GitHub 图床01. 创建 GitHub 图床仓库首先需要有一个登录 GitHub 的账号，没有的话去GitHub 官网注册一个 创建一个新的图床仓库，点击右上角的 New repository 填写如下配置信息，然后 Create 创建仓库 2. 获取 GitHub token 值点击右上的头像，选择设置 Setting 点击选择 Developer settings 然后点击 Generate New token 填写如下配置信息，只要勾选 repo 选项即可，然后页面拉到底部点击 Generate token 即可 此时会跳转到带有 token 的页面，将 token 值复制记录下来，之后用 PicGo 绑定 GitHub 图床时会利用到 3 PicGo 配置01. 绑定 GitHub 图床首先下载安装好 PicGo 软件，然后在右列表找到 GitHub 图床配置 001. 设定仓库名(必填)： 按照“GitHub 账户名/仓库名的格式填写”，比如我的是：Haoqi7/imgbed 002. 设定分支名(必填)： 仓库分支名填写”master”或者”main”，视情况而定。GitHub 官方表示,从 2020 年 10 月 1 日起,在该平台上创建的所有新的源代码仓库将默认被命名为”main”。 003. 设定 Token(必填)： 将之前步骤的 Token 值复制粘贴到这里 004. 指定存储路径： 这个选项可以为空，如果想将图片上传到仓库的指定目录下，可以填写目录名加/，比如我的 imgbed 仓库下有个 post 文件夹，需设置为 post/ 005. 设定自定义域名： 这里统一用 jsdelivr 的 CDN 加速域名，在上传图片后成功后，PicGo 会将“自定义域名+上传的图片名”生成的访问链接 自定义域名格式：https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;GitHub账户名&#x2F;仓库名 以我的格式为例：https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Haoqi7&#x2F;imgbed 配置完全部信息后，点击 设为默认图床，最后点击确定即可 02. 上传图片到图床在上传区上传图片，可支持本地图片上传(可多选图片)、剪贴板上传、URL 上传等三种方式。上传图片成功后，选择你想要生成的图片链接格式 03. PicGo 注意事项如果配置完 PicGo 后却上传图片失败，可以参考以下方法： 检查自定义域名是否正确 仓库名不要有空格 图片名字不要带有特殊符号，如：%、+、*、空格等 建议开启时间戳重命名，防止图片名字重复 上传图片间歇太短，需在 PicGo 设置中关闭 Server 选项 PicGo 应用不稳定因素，需重启应用 注：此文是本人在大佬的基础上进行修改，如有侵犯联系我删除。","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://haoqi7.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"PicGo","slug":"PicGo","permalink":"https://haoqi7.github.io/tags/PicGo/"},{"name":"图床","slug":"图床","permalink":"https://haoqi7.github.io/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"GitHub","slug":"GitHub","permalink":"https://haoqi7.github.io/tags/GitHub/"}],"author":"HaoQi"}],"categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://haoqi7.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"},{"name":"随笔篇","slug":"随笔篇","permalink":"https://haoqi7.github.io/categories/%E9%9A%8F%E7%AC%94%E7%AF%87/"},{"name":"插件篇","slug":"插件篇","permalink":"https://haoqi7.github.io/categories/%E6%8F%92%E4%BB%B6%E7%AF%87/"},{"name":"分享篇","slug":"分享篇","permalink":"https://haoqi7.github.io/categories/%E5%88%86%E4%BA%AB%E7%AF%87/"},{"name":"工具篇","slug":"工具篇","permalink":"https://haoqi7.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"},{"name":"文献篇","slug":"文献篇","permalink":"https://haoqi7.github.io/categories/%E6%96%87%E7%8C%AE%E7%AF%87/"},{"name":"紫砂壶篇","slug":"紫砂壶篇","permalink":"https://haoqi7.github.io/categories/%E7%B4%AB%E7%A0%82%E5%A3%B6%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://haoqi7.github.io/tags/hexo/"},{"name":"加载动画","slug":"加载动画","permalink":"https://haoqi7.github.io/tags/%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/"},{"name":"label","slug":"label","permalink":"https://haoqi7.github.io/tags/label/"},{"name":"typora","slug":"typora","permalink":"https://haoqi7.github.io/tags/typora/"},{"name":"随笔","slug":"随笔","permalink":"https://haoqi7.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"article","slug":"article","permalink":"https://haoqi7.github.io/tags/article/"},{"name":"notability","slug":"notability","permalink":"https://haoqi7.github.io/tags/notability/"},{"name":"leancloud","slug":"leancloud","permalink":"https://haoqi7.github.io/tags/leancloud/"},{"name":"valine","slug":"valine","permalink":"https://haoqi7.github.io/tags/valine/"},{"name":"Github Acions","slug":"Github-Acions","permalink":"https://haoqi7.github.io/tags/Github-Acions/"},{"name":"download","slug":"download","permalink":"https://haoqi7.github.io/tags/download/"},{"name":"literature","slug":"literature","permalink":"https://haoqi7.github.io/tags/literature/"},{"name":"PicGo","slug":"PicGo","permalink":"https://haoqi7.github.io/tags/PicGo/"},{"name":"Gitee","slug":"Gitee","permalink":"https://haoqi7.github.io/tags/Gitee/"},{"name":"图床","slug":"图床","permalink":"https://haoqi7.github.io/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"package","slug":"package","permalink":"https://haoqi7.github.io/tags/package/"},{"name":"node_modules","slug":"node-modules","permalink":"https://haoqi7.github.io/tags/node-modules/"},{"name":"GitHub Actions","slug":"GitHub-Actions","permalink":"https://haoqi7.github.io/tags/GitHub-Actions/"},{"name":"Github","slug":"Github","permalink":"https://haoqi7.github.io/tags/Github/"},{"name":"Hexo","slug":"Hexo","permalink":"https://haoqi7.github.io/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"https://haoqi7.github.io/tags/Blog/"},{"name":"Matery","slug":"Matery","permalink":"https://haoqi7.github.io/tags/Matery/"},{"name":"template","slug":"template","permalink":"https://haoqi7.github.io/tags/template/"},{"name":"douban","slug":"douban","permalink":"https://haoqi7.github.io/tags/douban/"},{"name":"思维导图","slug":"思维导图","permalink":"https://haoqi7.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"},{"name":"陶瓷","slug":"陶瓷","permalink":"https://haoqi7.github.io/tags/%E9%99%B6%E7%93%B7/"},{"name":"紫砂","slug":"紫砂","permalink":"https://haoqi7.github.io/tags/%E7%B4%AB%E7%A0%82/"},{"name":"npm","slug":"npm","permalink":"https://haoqi7.github.io/tags/npm/"},{"name":"平定","slug":"平定","permalink":"https://haoqi7.github.io/tags/%E5%B9%B3%E5%AE%9A/"},{"name":"紫砂壶","slug":"紫砂壶","permalink":"https://haoqi7.github.io/tags/%E7%B4%AB%E7%A0%82%E5%A3%B6/"},{"name":"查找","slug":"查找","permalink":"https://haoqi7.github.io/tags/%E6%9F%A5%E6%89%BE/"},{"name":"论文","slug":"论文","permalink":"https://haoqi7.github.io/tags/%E8%AE%BA%E6%96%87/"},{"name":"文献","slug":"文献","permalink":"https://haoqi7.github.io/tags/%E6%96%87%E7%8C%AE/"},{"name":"渲染","slug":"渲染","permalink":"https://haoqi7.github.io/tags/%E6%B8%B2%E6%9F%93/"},{"name":"GitHub","slug":"GitHub","permalink":"https://haoqi7.github.io/tags/GitHub/"}]}